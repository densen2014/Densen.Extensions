<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AME.Extensions</name>
    </assembly>
    <members>
        <member name="T:AME.BytesExtensions">
            <summary>
            Byte[] 扩展方法
            </summary>
        </member>
        <member name="T:AME.DateTimeExtensions">
            <summary>
            Date 扩展方法
            </summary>
        </member>
        <member name="M:AME.DateTimeExtensions.FirstSecond(System.DateTime)">
            <summary>
            日期开始范围
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AME.DateTimeExtensions.FirstSecond(System.DateTime,System.DateTime)">
            <summary>
            日期开始范围,带自定义时间
            </summary>
            <param name="obj"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:AME.DateTimeExtensions.LastSecond(System.DateTime)">
            <summary>
            日期结束范围 23:59:59
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AME.DateTimeExtensions.LastSecond(System.DateTime,System.DateTime)">
            <summary>
            日期结束范围,带自定义时间
            </summary>
            <param name="obj"></param>
            <param name="obj2"></param>
            <returns></returns>
        </member>
        <member name="M:AME.DateTimeExtensions.TransformDataLong(System.Nullable{System.DateTime})">
            <summary>
            将日期转换成yyyy-MM-dd HH:mm:ss字符串
            </summary>
        </member>
        <member name="M:AME.DateTimeExtensions.TransformDataShort(System.Nullable{System.DateTime})">
            <summary>
            将日期转换成yyyy-MM-dd字符串
            </summary>
        </member>
        <member name="M:AME.DateTimeExtensions.TransDateTimeToDecimal(System.DateTime)">
            <summary>
            将日期转换成decimal
            </summary>
        </member>
        <member name="M:AME.DateTimeExtensions.TransStrToDateTime(System.String)">
            <summary>
             字符串日期转DateTime
            </summary>
        </member>
        <member name="M:AME.DateTimeExtensions.TransDecimalToDateTime(System.String)">
            <summary>
            将decimal转换成日期格式
            </summary>
            <param name="date">yyyyMMddHHmmss</param>
            <returns>yyyy-MM-dd HH:mm:ss</returns>
        </member>
        <member name="T:AME.EnumExtensions">
            <summary>
            Enum 扩展方法
            </summary>
        </member>
        <member name="M:AME.EnumExtensions.GetTypeFromEnumsName(System.String,System.String,System.String)">
            <summary>
            通过文本名获取Enum枚举Type
            </summary>
            <param name="name"></param>
            <param name="pre">默认 AME.Enums+</param>
            <param name="assemblyString">默认空 eg: AME.API</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AME.EnumExtensions.GetEnumName(System.Enum)">
            <summary>
            获取枚举的值和描述
            </summary>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:AME.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            获取枚举的值和描述
            </summary>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:AME.EnumExtensions.GetEnumValueAndDescriptions(System.Type)">
            <summary>
            Eunm转IEnumerable,备注,value, 无备注回落为name
            </summary>
            <param name="type">Typeof(你的Enum)</param>
            <returns>name, Description , value</returns>
        </member>
        <member name="M:AME.EnumExtensions.EnumToDict(System.Type)">
            <summary>
            Eunm转Dictionary,备注,value, 无备注回落为name
            </summary>
            <param name="type">Typeof(你的Enum)</param>
            <returns>name, Description , value</returns>
        </member>
        <member name="M:AME.EnumExtensions.GetValueFromDescription``1(System.String)">
            <summary>
            从描述属性中获取枚举 
            <para>Get Enum from Description attribute</para>
            <para>var panda = EnumEx.GetValueFromDescription&lt;Animal&gt;("Giant Panda");</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="description"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:AME.IEnumerableExtensions">
            <summary>
            IEnumerable 扩展方法
            </summary>
        </member>
        <member name="T:AME.ArrayExtensions">
            <summary>
            Array 扩展方法
            </summary>
        </member>
        <member name="T:AME.IQueryableExtensions">
            <summary>
            IQueryable 扩展方法
            </summary>
        </member>
        <member name="M:AME.IQueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Boolean)">
            <summary>
            根据指定属性名称对序列进行排序
            </summary>
            <typeparam name="TSource">source中的元素的类型</typeparam>
            <param name="source">一个要排序的值序列</param>
            <param name="property">属性名称</param>
            <param name="descending">是否降序</param>
            <returns></returns>
        </member>
        <member name="M:AME.IQueryableExtensions.DataTableParallelForEach``1(System.Data.DataTable)">
            <summary>
            并行查找DataTable单元格
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:AME.IQueryableExtensions.CustomSort``1(System.String,System.Boolean,System.Collections.Generic.List{``0},System.ComponentModel.BindingList{``0})">
            <summary>
            转换 List T - BindingList T 转 List T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property">排序字段</param>
            <param name="ascSort">顺序/逆序</param>
            <param name="itemList">数据 List T , 为空则使用 bindingList</param>
            <param name="bindingList">数据 BindingList T </param>
            <returns></returns>
        </member>
        <member name="M:AME.IQueryableExtensions.CustomSort``1(System.String,System.Boolean,System.ComponentModel.BindingList{``0})">
            <summary>
            自定义排序 , BindingList T 转 List T 并按指定字段排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property">排序字段</param>
            <param name="ascSort">顺序/逆序</param>
            <param name="bindingList">数据 BindingList T</param>
            <returns></returns>
        </member>
        <member name="T:AME.LamdaHelper">
            <summary>
            动态生成比较lamda表达式帮助类
            </summary>
        </member>
        <member name="M:AME.LamdaHelper.GetExpression``2(System.String)">
            <summary>
            创建lambda表达式：p.propertyName
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <typeparam name="TKey">参数类型</typeparam>
            <param name="propertyName">字段名称（数据库中字段名称）</param>
            <returns></returns>
        </member>
        <member name="M:AME.LamdaHelper.True``1">
            <summary>
            创建lambda表达式：p=>true
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <returns></returns>
        </member>
        <member name="M:AME.LamdaHelper.False``1">
            <summary>
            创建lambda表达式：p=>false
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <returns></returns>
        </member>
        <member name="M:AME.LamdaHelper.GetOrderExpression``2(System.String)">
            <summary>
            创建lambda表达式：p=>p.propertyName
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <typeparam name="TKey">参数类型</typeparam>
            <param name="propertyName">字段名称（数据库中字段名称）</param>
            <returns></returns>
        </member>
        <member name="M:AME.LamdaHelper.CreateEqual``2(System.String,``1)">
            <summary>
            创建lambda表达式：p=>p.propertyName == propertyValue
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <typeparam name="S">参数类型</typeparam>
            <param name="propertyName">字段名称（数据库中字段名称）</param>
            <param name="propertyValue">数据值</param>
            <returns></returns>
        </member>
        <member name="M:AME.LamdaHelper.CreateNotEqual``2(System.String,``1)">
            <summary>
            创建lambda表达式：p=>p.propertyName != propertyValue
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <typeparam name="S">参数类型</typeparam>
            <param name="propertyName">字段名称（数据库中字段名称）</param>
            <param name="propertyValue">数据值</param>
            <returns></returns>
        </member>
        <member name="M:AME.LamdaHelper.CreateGreaterThan``2(System.String,``1)">
            <summary>
            创建lambda表达式：p=>p.propertyName > propertyValue
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <typeparam name="S">参数类型</typeparam>
            <param name="propertyName">字段名称（数据库中字段名称）</param>
            <param name="propertyValue">数据值</param>
            <returns></returns>
        </member>
        <member name="M:AME.LamdaHelper.CreateLessThan``2(System.String,``1)">
            <summary>
            创建lambda表达式：p=>  propertyValue > p.propertyName 
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <typeparam name="S">参数类型</typeparam>
            <param name="propertyName">字段名称（数据库中字段名称）</param>
            <param name="propertyValue">数据值</param>
            <returns></returns>
        </member>
        <member name="M:AME.LamdaHelper.CreateGreaterThanOrEqual``2(System.String,``1)">
            <summary>
            创建lambda表达式：p=>p.propertyName >= propertyValue
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <typeparam name="S">参数类型</typeparam>
            <param name="propertyName">字段名称（数据库中字段名称）</param>
            <param name="propertyValue">数据值</param>
            <returns></returns>
        </member>
        <member name="M:AME.LamdaHelper.CreateLessThanOrEqual``2(System.String,``1)">
            <summary>
            创建lambda表达式：p=>propertyValue >= p.propertyName 
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <typeparam name="S">参数类型</typeparam>
            <param name="propertyName">字段名称（数据库中字段名称）</param>
            <param name="propertyValue">数据值</param>
            <returns></returns>
        </member>
        <member name="M:AME.LamdaHelper.GetContains``1(System.String,System.String)">
            <summary>
            创建lambda表达式：p=>p.propertyName.Contains(propertyValue)
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <param name="propertyName">字段名称（数据库中字段名称）</param>
            <param name="propertyValue">数据值</param>
            <returns></returns>
        </member>
        <member name="M:AME.LamdaHelper.GetNotContains``1(System.String,System.String)">
            <summary>
            创建lambda表达式：!(p=>p.propertyName.Contains(propertyValue))
            </summary>
            <typeparam name="T">对象名称（类名）</typeparam>
            <param name="propertyName">字段名称（数据库中字段名称）</param>
            <param name="propertyValue">数据值</param>
            <returns></returns>
        </member>
        <member name="T:AME.ObjectExtensions">
            <summary>
            Object 扩展方法
            </summary>
        </member>
        <member name="M:AME.ObjectExtensions.Clone``1(``0)">
            <summary>
            泛型 Clone 方法
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ObjectExtensions.Reset``1(``0)">
            <summary>
            重置对象属性值到默认值方法
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:AME.ObjectExtensions.ObjectToJsonIndented(System.Object)">
            <summary>
            从一个Json生成美化的String格式
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ObjectExtensions.ObjectToJson(System.Object)">
            <summary>
            从一个对象信息生成Json串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ObjectExtensions.JsonToObject(System.String,System.Object)">
            <summary>
            从一个Json串生成对象信息
            </summary>
            <param name="jsonString"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ObjectExtensions.IsNumber(System.Type)">
            <summary>
            检查是否为 Number 数据类型
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ObjectExtensions.IsDateTime(System.Type)">
            <summary>
            检查是否为 DateTime 数据类型
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ObjectExtensions.GetDisplayNameDic``1(``0)">
            <summary>
            获取属性的displayName/获取绑定字段显示名称方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ObjectExtensions.GetDisplayNameII``1(``0,System.String,System.String)">
            <summary>
            获取属性的displayName/获取绑定字段显示名称方法
            </summary>
            <typeparam name="TItem"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AME.ObjectExtensions.ContainProperty(System.Object,System.String)">
            <summary>
            利用反射来判断对象是否包含某个属性
            </summary>
            <param name="instance">object</param>
            <param name="propertyName">需要判断的属性</param>
            <returns>是否包含</returns>
            <example>bool cc = _person.ContainProperty("cc");</example>
        </member>
        <member name="M:AME.ObjectExtensions.GetIdentityKey``1(``0,System.String)">
            <summary>
            获取属性的主键,反射获取属性值
            </summary>
            <param name="instance">object</param>
            <param name="propertyName">需要判断的属性</param> 
            <returns>是否包含</returns>
        </member>
        <member name="M:AME.ObjectExtensions.FieldSetValue``1(``0,System.String,System.Object)">
            <summary>
            创建属性
            </summary>
            <param name="instance">object</param>
            <param name="propertyName">需要判断的属性</param>
            <param name="value"></param> 
            <returns>是否包含</returns>
        </member>
        <member name="M:AME.ObjectExtensions.GetField``1(``0,System.String)">
            <summary>
            获取属性
            </summary>
            <param name="instance">object</param>
            <param name="propertyName">需要判断的属性</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:AME.ObjectExtensions.ObjectToMap(System.Object)">
            <summary>
            对象转换为字典
            </summary>
            <param name="obj">待转化的对象</param>
            <returns></returns>
        </member>
        <member name="M:AME.ObjectExtensions.EntityToMap(System.Object)">
            <summary>
            实体类对象转换为字典
            <para>实体类打上特性 [Serializable, DataContract] </para>
            <para>实体类字段打上特性 [DataMember] </para>
            </summary>
            <param name="obj">实体类</param>
            <returns></returns>
        </member>
        <member name="T:AME.ObjectExtensions.proc1">
            <summary>
            对象转换为字典 Demo
            </summary>
        </member>
        <member name="M:AME.StringExt.ToDecimal(System.String,System.Decimal)">
            <summary>
            String转Decimal
            </summary>
            <param name="t"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:AME.PathExtensions">
            <summary>
            Path 扩展方法
            </summary>
        </member>
        <member name="M:AME.PathExtensions.GetDirFiles(System.String,System.String,System.String,System.String[],System.String[],System.String)">
             <summary>
            文件名和目录名中的通配符 *，表示零到多个字符，不包括分隔符。 <para></para>
            值 说明<para></para>
            *.txt 具有.txt 文件扩展名的所有文件。<para></para>
            *.*	具有一个扩展名的所有文件。<para></para>
            *	顶层目录中的所有文件。<para></para>
            .*	以“.”开头的文件名称。<para></para>
            *word* 文件名中包含“word”的所有文件。<para></para>
            readme.* 所有带有任何文件扩展名且名为“readme”的文件。<para></para>
            styles/*.css	目录“styles/”中扩展名为“.css”的所有文件。<para></para>
            scripts/*/* “scripts/”中的或“scripts/”下一级子目录中的所有文件。<para></para>
            images*/*	文件夹中名称为“images”或名称以“images”开头的所有文件。<para></para>
            任意目录深度(/**/)。<para></para>
            值 描述<para></para>
            **/*	任何子目录中的所有文件。<para></para>
            dir/**/*	“dir/”下任何子目录中的所有文件。<para></para>
            https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.filesystemglobbing.matcher?view=dotnet-plat-ext-5.0
             </summary>
             <param name="searchDirectory">../starting-folder/</param>
             <param name="include">包含项 "*.txt"</param>
             <param name="exclude">排除项 "*.txt"</param>
             <param name="includeMatchers">多个包含项 new[] { "*.txt", "*.asciidoc", "*.md" }</param>
             <param name="excludeMatchers">多个排除项 new[] { "*.txt", "*.asciidoc", "*.md" }</param>
             <param name="matchfilename"></param>
        </member>
        <member name="M:AME.PathExtensions.FormattedPathName(System.String,System.Boolean)">
            <summary>
            格式化目录名，以避免出现“Illegal characters in path”错误：
            </summary>
            <param name="pathName"></param>
            <param name="replaceVolumeSeparatorChar">过滤冒号</param>
            <returns></returns>
        </member>
        <member name="M:AME.PathExtensions.CreatePathIfNotExists(System.String,System.Boolean)">
            <summary>
            创建目录(如果目录不存在)
            </summary>
            <param name="path">要创建的目录</param>
            <param name="withFileName">路径是否带文件名,自动分离目录名称 默认 false</param>
        </member>
        <member name="M:AME.StringExtensions.ToCamelCase(System.String)">
            <summary>将大驼峰命名转为小驼峰命名</summary>
        </member>
        <member name="M:AME.StringExtensions.ToSnakeCase(System.String)">
            <summary>将大驼峰命名转为蛇形命名</summary>
        </member>
        <member name="M:AME.StringExtensions.IsNullPlus(System.String)">
            <summary>
             string 扩展执行 IsNullOrWhiteSpace
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AME.StringExtensions.IsNotNullPlus(System.String)">
            <summary>
             string 扩展执行 !IsNullOrWhiteSpace
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:AME.StringExtensions.RemoveAllNonNumericValuesFromString(System.String)">
            <summary>
            R从字符串中删除所有非数字值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:AME.StringExtensions.ReplaceSpecialCharacters(System.String)">
            <summary>
            替换特殊字符
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AME.StringExtensions.BxSubstring(System.String,System.Int32,System.Boolean)">
            <summary>
            截取字符串
            </summary>
            <param name="inputString">输入字符串</param>
            <param name="maxLength">最大长度(按半角计算, 全角按半角的2倍计算)</param>
            <param name="appendEllipsis">是否需要添加省略号</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:AME.StringExtensions.MaskString(System.String,System.Decimal)">
            <summary>
            遮罩中间部分字符串
            </summary>
            <param name="x"></param>
            <param name="maskRate">遮罩比例,0.6表示60%</param>
            <returns></returns>
        </member>
        <member name="P:AME.Models.CheckNewResponse.Filename">
            <summary>
            文件名,带相对路径
            </summary>
        </member>
        <member name="P:AME.Models.CheckNewResponse.Version">
            <summary>
            文件版本
            </summary>
        </member>
        <member name="P:AME.Models.CheckNewResponse.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:AME.Models.CheckNewResponse.CreationTime">
            <summary>
            建立时间
            </summary>
        </member>
        <member name="P:AME.Models.CheckNewResponse.LasFetch">
            <summary>
            刷新时间
            </summary>
        </member>
        <member name="M:AME.ConventUtil.ObjectToJSON2``1(``0)">
            <summary>
            对象转换成JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ConventUtil.JsonToObject2``1(System.String)">
            <summary>
            Json转换成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonText"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ConventUtil.GenericToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            转换List到DataTable
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ConventUtil.DataTableToGeneric``1(System.Data.DataTable)">
            <summary>
            转换DataTable到List
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ConventUtil.DataUrl2Stream(System.String)">
            <summary>
            从 DataUrl 转换为 Stream
            <para>Convert from a DataUrl to an Stream</para>
            </summary>
            <param name="base64encodedstring"></param>
            <returns></returns>
        </member>
        <member name="M:AME.ConventUtil.Base642Stream(System.String)">
            <summary>
            从 base64 转换为 Stream
            <para>Convert from a base64 to an Stream</para>
            </summary>
            <param name="base64encodedstring"></param>
            <returns></returns>
        </member>
        <member name="T:AME.Util.ColorUtil">
            <summary>
            Provides useful methods for working with colors. Particularly the conversion from different kinds of C#-colors to string colors which are understood by javascript/css.
            </summary>
        </member>
        <member name="M:AME.Util.ColorUtil.ColorString(System.Byte,System.Byte,System.Byte)">
            <summary>
            Produces a string of the form 'rgba(r, g, b, 1)' with the provided rgb values where the alpha is fixed at 1
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AME.Util.ColorUtil.ColorHexString(System.Byte,System.Byte,System.Byte)">
            <summary>
            Produces a string of the form '#aabbc' with the provided rgb values
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AME.Util.ColorUtil.ColorHexString(System.Byte,System.Byte,System.Byte,System.Double)">
            <summary>
            Produces a string of the form '#aabbc' with the provided rgb values
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:AME.Util.ColorUtil.ColorString(System.Byte,System.Byte,System.Byte,System.Double)">
            <summary>
            Produces a string of the form 'rgba(r, g, b, alpha)' with the provided rgb and alpha values
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:AME.Util.ColorUtil.RandomColorString">
            <summary>
            Produces a string of the form 'rgba(r, g, b, alpha)' with random values for rgb and alpha
            </summary>
            <returns></returns>
        </member>
        <member name="M:AME.Util.ColorUtil.RandomColorArgb">
            <summary>
            Produces a string of the form 'rgba(r, g, b, alpha)' with random values for rgb and alpha
            </summary>
            <returns></returns>
        </member>
        <member name="M:AME.Util.ColorUtil.RandomColorHexString">
            <summary>
            Produces a string of the form 'rgba(r, g, b, alpha)' with random values for rgb and alpha
            </summary>
            <returns></returns>
        </member>
        <member name="M:AME.Util.ColorUtil.FromDrawingColor(System.Drawing.Color)">
            <summary>
            Generates the corresponding string representation (as hex) of a <see cref="T:System.Drawing.Color"></see> object.
            </summary>
            <returns>The string representation as a hex color string</returns>
        </member>
        <member name="T:AME.Util.HardwareUtil">
            <summary>
            硬件工具类
            </summary>
        </member>
        <member name="M:AME.Util.HttpClientUtils.JsonObjects``1(System.Uri)">
            <summary>
            api 在winform中的get 方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:AME.Extensions.Reflections.GetTypes(System.String,System.String)">
            <summary>  
            获取一个命名空间下的所有类  
            </summary>
            <param name="amespaceName"></param>
            <param name="assemblyString"></param>   
            <returns></returns>  
        </member>
        <member name="T:AME.Extensions.Resource">
            <summary>
            Android Resource Designer class.
            Exposes the Android Resource designer assembly into the project Namespace.
            </summary>
        </member>
        <member name="M:AME.Tools.FormatDecimal(System.Object,System.Int32)">
            <summary>
            格式化小数
            </summary>
            <param name="dblAmt">保留几位小数</param>
            <param name="intSumDec">格式化的double数值</param>
            <returns></returns>
        </member>
        <member name="M:AME.Tools.GetFileMd5Hash(System.String)">
            <summary>
            获取文件的MD5值
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <returns>返回32位MD5值</returns>
            <remarks></remarks>
        </member>
        <member name="M:AME.Tools.WriteTxtToFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            将文本写入txt文件中
            </summary>
            <param name="DirPath">文件路径</param>
            <param name="FileName">文件名称</param>
            <param name="Strs">字符串</param>
            <param name="IsCleanFile">是否先清空文件</param>
        </member>
        <member name="M:AME.Tools.runCmd(System.String,System.Boolean)">
            <summary>
            运行cmd命令
            </summary>
            <param name="cmd">执行运行命令</param>
            <param name="withCmdExe">使用 cmd.exe 执行命令</param>
            <returns></returns>
        </member>
        <member name="M:AME.Tools.GetPropertiesToDict``1(``0)">
            <summary>
            反射得到实体类的字段名称和值
            var dict = GetProperties(model);
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="t">实例化</param>
            <returns></returns>
        </member>
        <member name="M:AME.Tools.GetProperties2``1(``0)">
            <summary>
            反射得到实体类的字段名称
            var dict = GetProperties(model);
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="t">实例化</param>
            <returns></returns>
        </member>
        <member name="M:AME.Tools.DataTableToList``1(System.Data.DataTable)">
            <summary>
            DataTable利用泛型填充实体类
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="table">dt</param>
            <returns></returns>
        </member>
        <member name="M:AME.Tools.汉字转换成拼音II(System.String)">
            <summary>
            汉字转换成拼音
            比如：“张三100”,可以生成"zs100"
            </summary>
            <param name="mystr">带中文的字符串</param>
            <returns></returns>
        </member>
        <member name="M:AME.Tools.汉字转换成拼音(System.String)">
            <summary>
            取汉字拼音的首字母
            </summary>
            <param name="UnName">汉字</param>
            <returns>首字母</returns>
        </member>
        <member name="M:AME.Tools.String2Unicode(System.String)">
            <summary>
            字符串转Unicode
            </summary>
            <param name="source">源字符串</param>
            <returns>Unicode编码后的字符串</returns>
        </member>
        <member name="M:AME.Tools.Unicode2String(System.String)">
            <summary>
            Unicode转字符串
            </summary>
            <param name="source">经过Unicode编码的字符串</param>
            <returns>正常字符串</returns>
        </member>
        <member name="P:AME.Tools.IsMainThread">
            <summary>
            判断当前线程是否为主线程<para></para>
            If called in the non main thread, will return false;
            </summary>
        </member>
        <member name="T:Extensions.FileExtensions">
            <summary>
            System.IO 扩展方法
            </summary>
        </member>
        <member name="M:Extensions.FileExtensions.GetAutoSizeString(System.Int64,System.Int32)">
            <summary>
            得到适应的大小
            </summary>
            <param name="sizes"></param>
            <param name="roundCount"></param> 
            <returns>string</returns>
        </member>
        <member name="M:Extensions.FileExtensions.FormattedFileName(System.String)">
            <summary>
            格式化文件名，以避免出现“Illegal characters in path”错误：
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToGmtISO8601(System.DateTime)">
            <summary>
            转格林时间，并以ISO8601格式化字符串
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.GetTime(System.DateTime)">
            <summary>
            获取时间戳，按1970-1-1
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.GetTimeMilliseconds(System.DateTime)">
            <summary>
            获取时间戳毫秒数，按1970-1-1
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.GetTime(System.Int64,System.Boolean)">
            <summary>
            时间戳反转为时间，有很多中翻转方法，但是，请不要使用过字符串（string）进行操作，大家都知道字符串会很慢！
            </summary>
            <param name="TimeStamp">时间戳</param>
            <param name="AccurateToMilliseconds">是否精确到毫秒</param>
            <returns>返回一个日期时间</returns>
        </member>
        <member name="M:GlobalExtensions.ToByte(System.Object)">
            <summary>
            转换成Byte
            </summary>
            <param name="s">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToShort(System.Object)">
            <summary>
            转换成short/Int16
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToInt(System.Object,System.Boolean)">
            <summary>
            转换成Int/Int32
            </summary>
            <param name="s"></param>
            <param name="round">是否四舍五入，默认false</param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToLong(System.Object)">
            <summary>
            转换成Long/Int64
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToFloat(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换成Float/Single
            </summary>
            <param name="s"></param>
            <param name="decimals">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToDouble(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换成Double/Single
            </summary>
            <param name="s"></param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToDecimal(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换成Decimal
            </summary>
            <param name="s"></param>
            <param name="decimals">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToDateTime(System.Object)">
            <summary>
            转换成DateTime
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToDate(System.Object)">
            <summary>
            转换成Date
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToBooldefaultFalse(System.Object,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            转换成Boolean
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToBool(System.Object,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            转换成Boolean
            </summary>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.To``1(System.Object)">
            <summary>
            泛型转换，转换失败会抛出异常
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToIntString(System.Boolean)">
            <summary>
            布尔值转换为字符串1或者0
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToInt(System.Boolean)">
            <summary>
            布尔值转换为整数1或者0
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToZhCn(System.Boolean)">
            <summary>
            布尔值转换为中文
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToHex(System.Byte[],System.Boolean)">
            <summary>
            转换为16进制
            </summary>
            <param name="bytes"></param>
            <param name="lowerCase">是否小写</param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.HexToBytes(System.String)">
            <summary>
            16进制转字节数组
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:GlobalExtensions.ToBase64(System.Byte[])">
            <summary>
            转换为Base64
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpression.True``1">
            <summary>
            创建lambda表达式：p=>true
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpression.False``1">
            <summary>
            创建lambda表达式：p=>false
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpression.GetOrderExpression``2(System.String)">
            <summary>
            创建lambda表达式：p=>p.propertyName
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpression.CreateEqual``1(System.String,System.String)">
            <summary>
            创建lambda表达式：p=>p.propertyName == propertyValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpression.CreateNotEqual``1(System.String,System.String)">
            <summary>
            创建lambda表达式：p=>p.propertyName != propertyValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpression.CreateGreaterThan``1(System.String,System.String)">
            <summary>
            创建lambda表达式：p=>p.propertyName > propertyValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpression.CreateLessThan``1(System.String,System.String)">
            <summary>
            创建lambda表达式：p=>p.propertyName [ propertyValue]
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpression.CreateGreaterThanOrEqual``1(System.String,System.String)">
            <summary>
            创建lambda表达式：p=>p.propertyName >= propertyValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpression.CreateLessThanOrEqual``1(System.String,System.String)">
            <summary>
            创建lambda表达式：p=>p.propertyName = propertyValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpression.GetContains``1(System.String,System.String)">
            <summary>
            创建lambda表达式：p=>p.propertyName.Contains(propertyValue)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.Expressions.LambadaExpression.GetNotContains``1(System.String,System.String)">
            <summary>
            创建lambda表达式：!(p=>p.propertyName.Contains(propertyValue))
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
    </members>
</doc>
