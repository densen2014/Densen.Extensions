@page "/barcodeGenerators"
@attribute [TabItemOption(Text = "条码生成器", Icon = "fa fa-barcode")]
@inherits AppComponentBase
@using System.ComponentModel

@using BootstrapBlazor.Components

<a href="https://www.nuget.org/packages/BootstrapBlazor.BarcodeGenerator#readme-body-tab"><h3>条码生成器 Barcode Generator</h3></a>
<hr />
<a href="https://github.com/densen2014/Densen.Extensions/blob/master/Demo/DemoShared/Pages/BarcodeGenerators.razor"><h5>页面源码</h5></a>

<!--<Tab IsLazyLoadTabItem>
    <TabItem Text="条码生成器">
        <div style="max-width: 554px;">
            <div class="col-12" style="text-align: center; vertical-align: middle;">
                <BarCodeGenerator Value="@value" Options="Options" OnCompletedAsync="OnResult" />
            </div>
            <GroupBox  Title="参数">
                    <div class="row g-3">
                        <div class="col-12 col-sm-6">
                            <InputOnKeyup @bind-Value="value" ShowLabel="true" OnInput="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Select @bind-Value="Options.Format" OnValueChanged="OnValueChanged" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Slider @bind-Value="Options.Width" Min="1" Max="6" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Slider @bind-Value="Options.Height" Min="10" Max="300" Step="5" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Slider @bind-Value="Options.Margin" Min="-30" Max="100" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Switch @bind-Value="Options.Flat" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <ColorPicker @bind-Value="Options.Background" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <ColorPicker @bind-Value="Options.LineColor" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Switch @bind-Value="Options.DisplayValue" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <InputOnKeyup ShowLabel="true" @bind-Value="Options.Text" OnInput="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Select @bind-Value="Options.TextAlign" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Select @bind-Value="Options.TextPosition" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Select @bind-Value="Options.Font" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Select @bind-Value="Options.FontOptions" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Slider @bind-Value="Options.FontSize" Min="8" Max="52" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Slider @bind-Value="Options.TextMargin" Min="-30" Max="100" ShowLabel="true" />
                        </div>
                        <div class="col-12 col-sm-6">
                            <Textarea Value="@svg" DisplayText="SVG内容" ShowLabel="true" />
                        </div>
                    </div>
            </GroupBox>-->


            @*<Textarea @bind-Value="value" />*@
        <!--</div>
    </TabItem>
    <TabItem Text="批量">
        <BarCodeGenerator Format="EnumBarcodeType.CODE128" Value="Hi!" />
        <BarCodeGenerator Format="EnumBarcodeType.EAN13" Value="1234567890128" />
        <BarCodeGenerator Format="EnumBarcodeType.EAN8" Value="12345670" />
        <BarCodeGenerator Format="EnumBarcodeType.EAN5" Value="12345" />
        <BarCodeGenerator Format="EnumBarcodeType.EAN2" Value="12" />
        <BarCodeGenerator Format="EnumBarcodeType.UPC" Value="123456789012" />
        <BarCodeGenerator Format="EnumBarcodeType.CODE39" Value="Hello" />
        <BarCodeGenerator Format="EnumBarcodeType.ITF14" Value="1234567890123" />
        <BarCodeGenerator Format="EnumBarcodeType.ITF14" Value="123456" />
        <BarCodeGenerator Format="EnumBarcodeType.MSI" Value="12345" />
    </TabItem>
    <TabItem Text="简单配置">
        <BarCodeGenerator Options="Options1" />
        <BarCodeGenerator Options="Options2" />
        <BarCodeGenerator Options="Options3" />
    </TabItem>
</Tab>
@code{
    private BarcodeGeneratorOption Options { get; set; } = new();

    private BarcodeGeneratorOption Options1 { get; set; } = new()
    {
        Value = "Hi!",
        FontSize = 40,
        Background = "#4b8b7f",
        LineColor = "#ffffff",
        Margin = 40,
        TextMargin = 80
    };

    private BarcodeGeneratorOption Options2 { get; set; } = new()
    {
        Value = "Hi!",
        TextAlign = EnumBarcodeTextAlign.left,
        TextPosition = EnumTextPosition.top,
        Font = EnumBarcodeFont.Cursive,
        FontOptions = EnumBarcodeFontOption.bold,
        FontSize = 40,
        TextMargin = 15,
        Text = "Special"
    };


    private BarcodeGeneratorOption Options3 { get; set; } = new()
    {
        Value = "1234",
        Format = EnumBarcodeType.pharmacode,
        DisplayValue = false,
        Height = 50,
        Width = 6
    };


    private Dictionary<string, string> defaultValues = new Dictionary<string, string>()
    {
        { "CODE128", "Example 1234"},
        { "CODE128A", "EXAMPLE"},
        { "CODE128B", "Example text"},
        { "CODE128C", "12345678"},
        { "EAN13", "1234567890128"},
        { "EAN8", "12345670"},
        { "EAN5", "12340"},
        { "EAN2", "10"},
        { "UPC", "123456789999"},
        { "CODE39", "EXAMPLE TEXT"},
        { "ITF14", "10012345000017"},
        { "ITF", "123456"},
        { "MSI", "123456"},
        { "MSI10", "123456"},
        { "MSI11", "123456"},
        { "MSI1010", "123456"},
        { "MSI1110", "123456"},
        { "pharmacode", "1234"}
    };

    [DisplayName("条码文字")]
    private string? value { get; set; } = "12345";

    [DisplayName("SVG内容")]
    private string? svg { get; set; }

    private Task OnResult(string value)
    {
        svg = value;
        return Task.CompletedTask;
    }

    private Task OnValueChanged(EnumBarcodeFormat type)
    {
        value = defaultValues[type.ToString()];
        return Task.CompletedTask;
    }

}-->
